@layout('layout')

@section('content')
<div class="mx-auto my-6 lg:my-16 px-6 lg:px-10 max-w-5xl">
  <div class="prose mx-auto">
    <h1 class="text-4xl font-serif"> It Works! </h1>
    <p class="mt-4">
      Congratulations, you correctly loaded the Project Lobster Technical assignment
    </p>

    <h2>Project Lobster & Technology</h2>

    <p>
      In Project Lobster we are always looking for curious, professional, and eager to learn developers.
      <br>
      Thanks to you, we can ship more and better value to our end customers, as well as making the best decisions
      possible from a business point of view.
    </p>

    <p>
      To us, your previous experience isn't as important as:
      <ul>
        <li>Your attitude in front of new things</li>
        <li>Your eagerness to learn</li>
        <li>Your humility</li>
        <li>Your relationship with co-workers</li>
      </ul>
    </p>


    <h2>Repository introduction</h2>
    <p>
      The repository represents a really basic admin screen where users can see the Orders of an e-commerce.
      <br>
      The main application you would be working with is, in essence, just that. But way more complex and filled with
      features and details.
    </p>
    <h4>
      Starting the development database
    </h4>
    <p>
      To launch the development Database, just run the command:
      <code>node ace repopulate:db</code>
      <br>You can start working on the assignment right after running the command.
    </p>
    <h4>
      Starting the development server
    </h4>
    <p>
      To launch the development server, just run the command:
      <code>npm run dev</code>
      <br>Then visit localhost:3333 to access it
    </p>

    <h2>Aim of the assignement and how it will be rated</h2>
    <p>
      The aim of this assignment is to see how the applicant works with new frameworks to him/her in a full-stack
      context (Adonis & TailwindCSS).
    </p>
    <p>
      It should not last more than two/three days. And this code will never be used in production, it is purely to understand
      how the applicant works with the given
      assignment.
    </p>
    <p>
      Due to the short time, and expecting that the applicant is not familiarised with frameworks and/or language, the
      quality or cleanness of code won't be harshly judged. As long as the applicant later on can ask, comment, and
      defend their decisions. Sharing what could have been done better, and how.
    </p>
    <p>
      Asking questions about the assignement is okey and encouraged, we will take into account the type of questions and
      how they are asked.
    </p>



    <h2>The assignment</h2>
    <h3>First part: making an update endpoint and hooking it to the frontend</h3>
    <p>
      This first part of the assigments serves as an introduction to the <a
        href="https://docs.adonisjs.com/guides/introduction">Adonis framework</a>.
      In it you will have to create a new <a href="https://docs.adonisjs.com/guides/controllers">Controller</a> action,
      where the Order <a href="https://docs.adonisjs.com/guides/models/introduction">model</a> will be updated.
    </p>

    <p>
      The framework encourages the MVC (<a
        href="https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller">Model-View-Controller</a>)
      pattern. Where all routes hit the <code>routes.ts</code> file, and then get redirected from there to the
      appropiate Controller. Then, inside the Controller, the business logic is applied, changes are saved to the
      Database through a Model, and the user gets served some HTML through a View file (in Adonis those files end up
      with the <code>.edge</code> extension)
    </p>

    <p>
      If you go to an Order details page: you will see at the top the customer information.
      <br>Right now that information cannot be changed by the users, which is really inconvenient when they make a
      mistake that needs to be corrected.
      <br><strong>Our users would like to be able to update this order data.</strong>
    </p>

    <p>Some tips to make it easier for you:</p>
    <ul>
      <li>You should look at how we currently update the Items details for reference. The item-update form in the file
        <code>resources/views/orders/show/update-item.edge</code>, and the
        <code>update</code> action in the file <code>OrderItemsController.update</code> are made to help
        you. The general logic and structure should be fairly similar to what you need to do.
      </li>
      <li>You will probably have to modify the files <code>routes.ts</code>, <code>views/orders/show.edge</code>, <code>OrdersController.ts</code></li>
      <li>Your best friend is the <a href="https://docs.adonisjs.com/guides/introduction">Adonis documentation</a></li>
      <li>If you get stuck: ask the person that handed you this technical test. It's part of the company culture to better ask rather than do nothing for hours! Nobody is born knowing.</li>
    </ul>

    <p>A developer colleague of yours has already implemented a couple of <strong>Acceptance tests</strong> for this endpoint in the file <code>tests/system/OrdersController.spec.ts</code>.
      <br>You can run all of the tests from a new terminal in the root folder with the command: <code>node ace test</code>, and keep them running at every file change with <code>node ace test -w</code>
      <br>In the terminal output when running the tests you will see some hints like the expected route, expected payload, and the expected response and if a certain Domain Event is expected. You can also read these in the test file itself.
      <br>We expect these tests to pass when the feature is fully implemented.
    </p>

    <hr>

    <h3>Second part: adding a new attribute "language" to the Orders database</h3>
    <p>
      The Marketing department wants to be able to communicate with our customers in their preferred language. To achieve this: we want to store in the Order database a new column "preferred_language".
      <br>This new attribute will allow us in the future to know in which language send emails and notifications to the customer.
      <br>For now we will only accept the language locales: <code>['es', 'en']</code>
    </p>

    <p>
      <strong>Your job in this second part is to modify the Orders database to add this new column <code>preferred_language</code> and be able to modify thanks to the form and endpoint you wrote in the last part. You will have to modify it to add this new field so the users can edit the field.</strong>
    </p>

    <p>There are a lot of details we are not addressing on purpose (default column value? is it required? an enum is required?...) We leave them up to you and to your criteria.</p>

    <p>Some tips to help you:</p>
    <ul>
      <li>We are using a SQL database, so a <a href="https://docs.adonisjs.com/guides/database/migrations">schema migration</a> will be needed to add a column</li>
      <li>Once the column is added to the SQL schema, you will need to retrieve it. That will be in the Database model <code>app/Models/Order.ts</code></li>
      <li>When adding the new field to the update request, maybe you will break the existing acceptance tests: that is okey because we are modifying the requirements of the request. You are encouraged to fix the test if you can, but that is entirely optional for this assignemnt.</li>
    </ul>

    <h2>Tech stack and frameworks used</h2>
    <p>
      Both this repository and our production apps mainly use these frameworks / libraries. We recommend reading their
      home-pages before going into the assignement, and going into their documentation when needed while completing it.
    </p>
  </div>


  <div class="mt-6 lg:mt-12 space-y-6 lg:space-y-12 text-gray-700">
    <!-- Adonis JS -->
    <div class="p-6 bg-indigo-50 border-indigo-100 border rounded-xl">
      @component('components/two_col_card', {})
      @slot('legend')
      <h2 class="font-serif text-2xl">AdonisJS</h2>
      <p>
        <a href="https://docs.adonisjs.com/guides/introduction">Official docs</a>
      </p>
      @endslot
      <div class="prose prose-sm">
        <p>
          According to their website:
        </p>
        <div class="pl-2 border-0 border-l-2 border-indigo-300">
          <cite>
            AdonisJS includes everything you need to create a fully functional web app or an API server.
            Stop wasting hours in downloading and assembling hundreds of packages together â€” Use AdonisJS and be
            productive from day one.
          </cite>
        </div>
        <p>
          Adonis is mainly a back-end (server-side) framework, but it also comes with a server-side templating engine:
          <a href="https://docs.adonisjs.com/guides/views/introduction">Edge.</a> That gives us a quick, performant, and
          simple front-end that more than covers our needs.
        </p>
        <p>
          To render this page, the general request-response goes like this:
          <ol>
            <li>Your browser hits the dev server for the address localhost:3333</li>
            <li>The server looks into the <code>start/routes.ts</code> file to know what to do</li>
            <li>
              There, we call the Edge templating engine to render the template "welcome". That is located at
              <code>./resources/views/welcome.edge</code>
            </li>
            <li>
              That file also calls the layout located at <code>./resources/views/layout.edge</code> to render the
              general HTML markup
            </li>
            <li>Once the HTML has been rendered: it gets sent back with a code 200 response to the browser, that loads
              it along with its assets</li>
          </ol>
        </p>


      </div>
      @endcomponent
    </div>

    <!-- TailwindCSS -->
    <div class="p-6 bg-blue-50 border-blue-100 border rounded-xl">
      @component('components/two_col_card', {})
      @slot('legend')
      <h2 class="font-serif text-2xl">TailwindCSS</h2>
      <p>
        <a href="https://tailwindcss.com/">Official docs</a>
      </p>
      @endslot
      <div class="prose prose-sm">
        <p>
          Taking it directly from their website, TailwindCSS can be defined as:
          <br>
          <div class="border-0 border-l-2 border-blue-400 pl-2">
            <cite>
              A utility-first CSS framework packed with classes like "flex", "pt-4", "text-center" and "rotate-90" that
              can be
              composed to build any design, directly in your markup.
            </cite>
          </div>
        </p>
        <p>
          Eventhough it can seem preposterous to some developers at first, in our experience it is one of the most
          quick,
          direct, and low-maintenance ways of writing good CSS.
        </p>
      </div>
      @endcomponent
    </div>

    <!-- Alpine JS -->
    <div class="p-6 bg-green-50 border-green-100 border rounded-xl">
      @component('components/two_col_card', {})
      @slot('legend')
      <h2 class="font-serif text-2xl">AlpineJS</h2>
      <p>
        <a href="https://alpinejs.dev/">Official docs</a>
      </p>
      @endslot
      <div class="prose prose-sm">
        <p>
          AlpineJs is a minimalist front-end Javascript framework, mainly aimed at sprinkling light Javascript
          interactions on a server-side rendered page.
        </p>

        <p>
          We use exactly for that: giving some light and simple JS interactivity. Buttons, divs that appear /
          disappear...
          We also sometimes use it to make more complex AJAX components, but that is usually the exception.
        </p>

        <p>
          Here is a really simple example of a basic button with a counter that increments on click:
        </p>
        <div class="bg-green-100 px-3 py-1.5 rounded-lg text-xs">
          <code class="whitespace-pre-line">
            {{ `<button type="button" x-data="{counter: 0}" x-on:click="counter++">
                  counter: <span x-text="counter"></span>
                </button>`
              }}
          </code>
        </div>

        <p>
          That when rendered, styled, and initialized looks like this:
        </p>
        <button class="px-4 py-1.5 bg-green-100 shadow border-green-200 border text-green-700 rounded-md" type="button"
          x-data="{counter: 0}" x-on:click="counter++">
          counter:
          <span x-text="counter"></span>
        </button>
      </div>
      @endcomponent
    </div>
  </div>

  <div>
    <p class="my-6 lg:my-12 text-center text-xl">
      <a href="/orders">
        Go to orders index page
      </a>
    </p>
  </div>

</div>
@endsection
